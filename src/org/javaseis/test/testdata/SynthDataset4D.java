package org.javaseis.test.testdata;

import org.javaseis.grid.GridDefinition;
import org.javaseis.io.ExtentPolicy;
import org.javaseis.io.Seisio;
import org.javaseis.io.VirtualFolders;
import org.javaseis.properties.AxisDefinition;
import org.javaseis.properties.AxisLabel;
import org.javaseis.properties.DataDefinition;
import org.javaseis.properties.DataDomain;
import org.javaseis.properties.DataFormat;
import org.javaseis.properties.DataType;
import org.javaseis.properties.PropertyDescription;
import org.javaseis.properties.TraceProperties;
import org.javaseis.properties.Units;
import org.javaseis.util.SeisException;

/**
 * This class generates a synthetic dataset that is used in many of the unit
 * tests. The code was moved from a static method in Seisio to the test package
 * and refactored so that it could be more easily used in other tests.
 *
 * The default constructors will create a 4 dimensional dataset with the
 * datatype set to CMP and a framework of; Number of samples per trace - 251
 * Number of traces per frame - 50 Number of frames per volume - 21 Number of
 * volumes per hypercube - 11 Other geometries can be generated by providing the
 * additional framework information in the constructors.
 *
 */
public class SynthDataset4D {
  protected Seisio _seisio;
  protected int _numDimensions = 4;
  protected int _numSamples = 50;
  protected int _numHeaderProps = 9;
  protected DataType _dataType = DataType.CMP;
  protected DataFormat _traceFormat = DataFormat.FLOAT;
  protected int _numTraces;
  protected int _numFrames;
  protected int _numVolumes;
  protected AxisDefinition _axes[] = new AxisDefinition[_numDimensions];
  protected GridDefinition _gridDef;
  protected DataDefinition _dataDef;
  protected String _presidents[] = { "George Washington", "Thomas Jefferson", "Abe Lincoln", "Teddy Roosevelt" };
  protected PropertyDescription _headerProps[];
  protected TraceProperties _headerDef;
  protected int _numExtents;
  protected VirtualFolders _vFolders;
  private ExtentPolicy _policy;

  /**
   * Constructor that specifies a new non-virtual JS dataset using the default
   * framework
   */
  public SynthDataset4D(String path) throws SeisException {
    this(path, 5, 10, 10, null);
  }

  public SynthDataset4D(String path, GridDefinition grid) throws SeisException {
    this(path, 5, 10, 10, grid);
  }

  /**
   * Constructor that allows the caller to specify some of the information in
   * the framework in preperation for creating a non-virtual dataset. .
   * 
   * @param path
   *          path to dataset
   * @param numTraces
   *          number of traces
   * @param numFrames
   *          number of frames
   * @param numVolumes
   *          number of volumes
   * @throws SeisException
   */
  public SynthDataset4D(String path, int numTraces, int numFrames, int numVolumes, GridDefinition grid)
      throws SeisException {
    _numTraces = numTraces;
    _numFrames = numFrames;
    _numVolumes = numVolumes;
    // if (grid == null){
    init();
    // }
    // else{
    // init();
    // _gridDef = grid;
    // }

    _seisio = new Seisio(path, _gridDef, _dataDef, _headerDef);
  }

  /**
   * Constructor that specifies a virtual dataset using the default framework.
   * 
   * @param path
   *          path to dataset
   * @param vFolders
   *          VirtualFolders
   * @param numExtents
   *          number of extents
   * @param policy
   *          extent policy
   * @throws SeisException
   */
  public SynthDataset4D(String path, VirtualFolders vFolders, int numExtents, ExtentPolicy policy)
      throws SeisException {
    this(path, 50, 21, 11, vFolders, numExtents, policy);
  }

  public SynthDataset4D(String path, VirtualFolders vFolders) throws SeisException {
    _seisio = new Seisio(path);
  }

  /**
   * Constructor that specifies a virtual dataset and some of the framework
   * information
   * 
   * @param path
   *          path to dataset
   * @param numTraces
   *          number of traces
   * @param numFrames
   *          number of frames
   * @param numVolumes
   *          number of volumes
   * @param vFolders
   *          VirtualFolders
   * @param numExtents
   *          number of extents
   * @param policy
   *          extent allocation policy
   * @throws SeisException
   */
  public SynthDataset4D(String path, int numTraces, int numFrames, int numVolumes, VirtualFolders vFolders,
      int numExtents, ExtentPolicy policy) throws SeisException {
    _numTraces = numTraces;
    _numFrames = numFrames;
    _numVolumes = numVolumes;
    _numExtents = numExtents;
    _vFolders = vFolders;
    _policy = policy;
    init();
    _seisio = new Seisio(path, _gridDef, _dataDef, _headerDef);
  }

  /**
   * Create the dataset as either a virtual or non-virtual JS dataset.
   * 
   * @throws SeisException
   */
  public Seisio create() throws SeisException {
    _seisio.setMapped();
    if (_vFolders == null)
      _seisio.create();
    else
      _seisio.create(_vFolders, _numExtents);
    return _seisio;
  }

  /**
   * Opens an existing JS dataset.
   * 
   * @param mode
   *          open mode
   * @throws SeisException
   */
  public Seisio open(String mode) throws SeisException {
    _seisio.open(mode);
    GridDefinition gridDef = _seisio.getGridDefinition();
    _numTraces = (int) gridDef.getNumTracesPerFrame();
    _numFrames = (int) gridDef.getNumFramesPerVolume();
    _numVolumes = (int) gridDef.getNumVolumesPerHypercube();
    init();
    return _seisio;
  }

  /**
   * Write synthetic data to all the frames in the dataset.
   * 
   * @throws SeisException
   */
  public void writeAllData() throws SeisException {
    writeData(0, _numFrames, 0, _numVolumes, 0);
  }

  // Write uniform data
  public void writeUniformTraces(double Num) throws SeisException {
    // Write synthetic data to the dataset.
    float origTraceData[][] = _seisio.getTraceDataArray();
    for (int i = 0; i < _numTraces; i++) {
      for (int j = 0; j < _numSamples; j++) {
        origTraceData[i][j] = (float) (Num);
      }
    }
  }

  // Write circular data
  public void writeCircularTraces() throws SeisException {
    // Write synthetic data to the dataset.
    float origTraceData[][] = _seisio.getTraceDataArray();
    double omega1;
    double omega2;
    double t, pi = Math.PI;
    omega1 = pi / (_numSamples - 1);
    for (int i = 0; i < _numTraces; i++) {
      omega2 = (i + 10) * omega1;
      for (int j = 0; j < _numSamples; j++) {
        t = j;
        origTraceData[i][j] = (float) (Math.cos(omega1 * t) * Math.sin(omega2 * t));
      }
    }
  }

  // Type 0 - original javaseis data
  // Type 1 - all 0
  // Type 2 - alternate number between volume
  public void writeAlernatingData(int Type) throws SeisException {
    writeData(0, _numFrames, 0, _numVolumes, Type);
  }

  /**
   * Write synthetic data to the frames and volumes specified. This is exposed
   * so that an MPI test could decompose the write accross several nodes.
   * 
   * @param fStart
   *          index of starting frame
   * @param fStop
   *          index of last frame
   * @param vStart
   *          index of staring volume
   * @param vStop
   *          index of last volume
   * @throws SeisException
   */
  public void writeData(int fStart, int fStop, int vStart, int vStop, int dataType) throws SeisException {
    assert(fStart >= 0);
    assert(fStop <= _numFrames);
    assert(vStart >= 0);
    assert(vStop <= _numVolumes);

    if (dataType == 1) {
      writeUniformTraces(0);
    } else {
      writeCircularTraces();
    }

    int iline, xline;
    double xyz[] = new double[3];
    double xm, ym, dxy = 0;
    AxisDefinition volumeAxis;
    AxisDefinition frameAxis;
    AxisDefinition traceAxis;
    int origPosition[] = new int[_numDimensions];
    origPosition[GridDefinition.SAMPLE_INDEX] = 0;
    origPosition[GridDefinition.TRACE_INDEX] = 0;
    for (int volumeIndex = vStart; volumeIndex < vStop; volumeIndex++) {
      if (dataType == 2) {
        writeUniformTraces(volumeIndex);
      }
      origPosition[GridDefinition.VOLUME_INDEX] = volumeIndex;
      volumeAxis = _gridDef.getAxis(GridDefinition.VOLUME_INDEX);
      iline = (int) (volumeAxis.getLogicalOrigin() + (volumeAxis.getLogicalDelta() * volumeIndex));
      xm = (volumeAxis.getPhysicalOrigin() + (volumeAxis.getPhysicalDelta() * volumeIndex));
      for (int frameIndex = fStart; frameIndex < fStop; frameIndex++) {
        frameAxis = _gridDef.getAxis(GridDefinition.FRAME_INDEX);
        xline = (int) (frameAxis.getLogicalOrigin() + (frameAxis.getLogicalDelta() * frameIndex));
        ym = (frameAxis.getPhysicalOrigin() + (frameAxis.getPhysicalDelta() * frameIndex));
        for (int traceIndex = 0; traceIndex < _numTraces; traceIndex++) {
          traceAxis = _gridDef.getAxis(GridDefinition.TRACE_INDEX);
          dxy = (traceAxis.getPhysicalOrigin() + (traceAxis.getPhysicalDelta() * traceIndex));
          _headerDef.setTraceIndex(traceIndex);
          _headerDef.putInt("ILINE_NO", iline);
          _headerDef.putInt("XLINE_NO", xline);
          xyz[0] = xm;
          _headerDef.putDouble("SOU_XD", xyz[0]);
          xyz[1] = ym;
          _headerDef.putDouble("SOU_YD", xyz[1]);
          xyz[2] = 0.0d;
          _headerDef.putDouble("SOU_ELEV", xyz[2]);
          xyz[0] = xm + dxy;
          _headerDef.putDouble("REC_XD", xyz[0]);
          xyz[1] = ym - dxy;
          _headerDef.putDouble("REC_YD", xyz[1]);
          xyz[2] = 1.0d;
          _headerDef.putDouble("REC_ELEV", xyz[2]);
          int presIndex = traceIndex % _presidents.length;
          _headerDef.putValue("THE_PREZ", _presidents[presIndex]);
        }
        origPosition[GridDefinition.FRAME_INDEX] = frameIndex;
        // _seisio.mapVolume(origPosition);
        // _seisio.mapFrame(frameIndex, _numTraces);
        int count = _seisio.writeFrame(origPosition, _numTraces);
        if (count != _numTraces) {
          throw new SeisException("Seisio: Error writing to dataset (" + count + " != " + _numTraces);
        }
      }
    }
  }

  /**
   * Read all the frames from the dataset. Nothing is done with the results but
   * the headers and trace data is read from the frame.
   * 
   * @throws SeisException
   */
  public void readAllData() throws SeisException {
    readData(0, _numFrames, 0, _numVolumes);
  }

  /**
   * Read the data from the dataset using the start and stop values for the
   * frame and volume indexes.
   *
   * @param fStart
   * @param fStop
   * @param vStart
   * @param vStop
   * @throws SeisException
   */
  public void readData(int fStart, int fStop, int vStart, int vStop) throws SeisException {
    assert(fStart >= 0);
    assert(fStop <= _numFrames);
    assert(vStart >= 0);
    assert(vStop <= _numVolumes);

    // Read data from the dataset.
    float testTraceData[][] = _seisio.getTraceDataArray();
    int position[] = new int[_numDimensions];
    position[GridDefinition.SAMPLE_INDEX] = 0;
    position[GridDefinition.TRACE_INDEX] = 0;
    for (int volumeIndex = vStart; volumeIndex < vStop; volumeIndex++) {
      position[GridDefinition.VOLUME_INDEX] = volumeIndex;
      for (int frameIndex = fStart; frameIndex < fStop; frameIndex++) {
        position[GridDefinition.FRAME_INDEX] = frameIndex;
        int count = _seisio.readFrame(position);
        if (count != _numTraces) {
          throw new SeisException("Error reading from dataset (" + count + " != " + _numTraces);
        }
      }
    }
  }

  /*
   * Helper method to setup the JS dataset and init private variables.
   */
  void init() {
    _axes[0] = new AxisDefinition(AxisLabel.TIME, Units.MSEC, DataDomain.TIME, _numSamples, 0, 4, 0.0f, 4.0f);
    _axes[1] = new AxisDefinition(AxisLabel.OFFSET, Units.FEET, DataDomain.SPACE, _numTraces, 50, 50, 50.0f, 50.0f);
    _axes[2] = new AxisDefinition(AxisLabel.CROSSLINE, Units.FEET, DataDomain.SPACE, _numFrames, 100, 1, 1250.0f,
        12.5f);
    _axes[3] = new AxisDefinition(AxisLabel.INLINE, Units.FEET, DataDomain.SPACE, _numVolumes, 200, 2, 5000.0f, 25.0f);
    _gridDef = new GridDefinition(_numDimensions, _axes);
    _dataDef = new DataDefinition(_dataType, _traceFormat);

    _headerProps = new PropertyDescription[_numHeaderProps];
    _headerProps[0] = new PropertyDescription("THE_PREZ", "Name of President", PropertyDescription.HDR_FORMAT_STRING,
        27);
    _headerProps[1] = new PropertyDescription("ILINE_NO", "Inline #", PropertyDescription.HDR_FORMAT_INTEGER, 1);
    _headerProps[2] = new PropertyDescription("XLINE_NO", "Crossline #", PropertyDescription.HDR_FORMAT_INTEGER, 1);
    _headerProps[3] = new PropertyDescription("SOU_XD", "Source X - Double", PropertyDescription.HDR_FORMAT_DOUBLE, 1);
    _headerProps[4] = new PropertyDescription("SOU_YD", "Source Y - Double", PropertyDescription.HDR_FORMAT_DOUBLE, 1);
    _headerProps[5] = new PropertyDescription("SOU_ELEV", "Source Elevation - Double",
        PropertyDescription.HDR_FORMAT_DOUBLE, 1);
    _headerProps[6] = new PropertyDescription("REC_XD", "Receiver X - Double", PropertyDescription.HDR_FORMAT_DOUBLE,
        1);
    _headerProps[7] = new PropertyDescription("REC_YD", "Receiver Y - Double", PropertyDescription.HDR_FORMAT_DOUBLE,
        1);
    _headerProps[8] = new PropertyDescription("REC_ELEV", "Receiver Elevation - Double",
        PropertyDescription.HDR_FORMAT_DOUBLE, 1);

    _headerDef = new TraceProperties(_numHeaderProps, _headerProps);
  }
}